//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "course_offerings")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub course_offering_id: i32,
    pub course_code: String,
    pub title: String,
    pub tutor_invite_code: Option<String>,
    pub start_date: Date,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::faqs::Entity")]
    Faqs,
    #[sea_orm(has_many = "super::queues::Entity")]
    Queues,
}

impl Related<super::faqs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Faqs.def()
    }
}

impl Related<super::queues::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Queues.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::tutors::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::tutors::Relation::CourseOfferings.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
