//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "tutors")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub zid: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub course_offering_id: i32,
    pub is_course_admin: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::course_offerings::Entity",
        from = "Column::CourseOfferingId",
        to = "super::course_offerings::Column::CourseOfferingId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CourseOfferings,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::Zid",
        to = "super::users::Column::Zid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::course_offerings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CourseOfferings.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
