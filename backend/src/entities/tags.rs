//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "tags")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub tag_id: i32,
    pub queue_id: i32,
    pub name: String,
    pub is_priority: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::queues::Entity",
        from = "Column::QueueId",
        to = "super::queues::Column::QueueId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Queues,
    #[sea_orm(has_many = "super::request_tags::Entity")]
    RequestTags,
}

impl Related<super::queues::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Queues.def()
    }
}

impl Related<super::request_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RequestTags.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
